*{
	//border: 1px solid white;
	//box-sizing: border-box; /* will not affect size of box */
}

html, body{
	height: 100%
	width:100%;
}

html{
	background: rgb(21,142,143);
	background: radial-gradient(circle, rgba(21,142,143,1) 40%, rgba(13,50,83,1) 70%, rgba(2,14,36,1) 100%);
}

body{
	display: flex;
}

.protein{
	width:75%;
	height: 75%;
	max-width: 900px; /* max width of item no matter how reader stretch the webpage-ie size capped at tht px*/
	min-width: 500px;
	margin:auto; /* centres the item - need flex on parent to auto centre top,bottom,left,right properly*/
}

.Protein-Title h1{
	color: rgb(255,210,76,0.75);
	font-weight: 300;
	font-size: 48px;

	text-transform: uppercase;
	text-align: center;
	text-shadow: 0px 0px 3px rgba(255,216,99,0.75);
}

.Protein-Title h1 span{
	font-size: 24px;
	display: block; /*span is an inline property, this set it as a block therefore another line */

	color: rgba(255,210,76,0.5);

	text-shadow: none;
}

.Protein-Title p{
	color: rgb(255,210,76,0.65);

	font-weight: 200;
	font-size: 18px;
	text-align: center;

	line-height: 1.3;

	width:65%; /*so that it do not span across the entire box */
	min-width: 475px; /*cannot be smaller than 475px*/

	margin:0 auto; /* so top and bottom has no space and its centered */
}


.protein-display{
	width:80%;


	margin:40px auto 20px auto; /*40 top, 20 bottom and centre left-right */

}

.protein-display-image{
	position: relative; /* anything in this box will be bounded to this box */
}

.protein-display-controls ul{
	list-style-type: none;
	padding: 0;

	border-top: 0.1rem dotted rgba(170,166,153,1);

	width:400px;

	margin: 50px auto 0 auto;
}

.protein-display-controls ul li{
	display:inline-block;

	position: relative;
}

.protein-display-controls ul li:nth-of-type(1){ /* selecting the 1st list item */
	left:-75px; /* x distance relative to the li location */
	top:-10px;
}

.protein-display-controls ul li:nth-of-type(2){
	left:-35px;
	top:-10px;
}

.protein-display-controls ul li:nth-of-type(3){ 
	right:-55px; 
	top:-10px;
}


.protein-display-controls li button{
	background-color: transparent; 

	color: #ada17c;
	font-weight: 300;
	font-size: 18px;

	text-transform: lowercase;

	border:none;
	outline: none; /* weird box around button when clicked - removes that */
}

.protein-display-controls li button span{
	border: 0.1rem solid rgba(170,166,153,1);

	display: block;

	border-radius: 50%; /*curves the edges of the box so a rectangle turns into an eclipes */
	width:15px; /*  height = width & border radius 50% > a circle */
	height: 15px;

	background-color: rgba(170,166,153,1);

	margin: 0 auto 10px auto;

}


.protein-display-controls li button:hover{
	color: #FFD24C;
}	

/* find every span inside a button inside a list that when a user hover...*/
.protein-display-controls ul li button:hover span{
	background-color: #FFD24C;
}

/* any class with "uk-active" under li will have .... - also these are buttons so css need to apply to the button*/
/* UIkit automatically adds "uk-active" to li items in the switcher options - check using inspector */
.protein-display-controls li.uk-active button{
	color: #FFD24C;
	text-shadow: 0px 0px 3px rgba(255,216,99,0.75);

}


.protein-display-controls li.uk-active button span{
	background-color: #FFD24C;

	box-shadow: 0px 0px 3px 1px rgba(255,216,1);

}

.protein-display-image .annotation-button{
	animation: dancing 2s;
}


.protein-display-image li.uk-active img{
	animation: dancing 2s ;
}

@keyframes dancing{
	0%{
		opacity: 0;
		transform: rotate3d(0);
	}
	50% {
		opacity: 0.5;
		transform: rotate3d(1,1,1, 2deg);
	}
	100%{
		opacity: 1;
		transform: rotate3d(0);

	}
}
.annotation{
	position: absolute;

}

.annotation-button{
	color: rgb(9,126,126);
	background-color: rgba(255,210,76,0.75);

	font-size: 30px;
	font-weight: 700;

	border-radius: 50%;
	width: 50px;
	height:50px;

	text-align: center;

	margin-bottom: 15px;

	transition: transform 0.75s; /* time taken to return when no loner hover */

}

/* since the toggle option is also set to hover, this hover styling applies 
to the "+" - ie the "button". Resulting in the annotation content appearing and 
the button animations to occur when the user hovers on the button */

.annotation-button:hover{
	transform: scale(1.3) rotate(15deg); /* The effect = double the size and rotate when the user hovers */
	transition: transform 0.75s; /* the "animation" aspect of the "effect" */

}
.annotation-content {
	color: rgb(9,126,126);
	background-color: rgba(255,210,76,0.75);

	padding: 10px;

	line-height: 1.3;

	font-size: 18px;
	font-weight: 300;

	width: 75%;

	opacity:0;
	transition: opacity 0.75s;

}

#annotation-1{
	left:60%;
	top:40%;
}

#annotation-2{
	left:30%;
	bottom: 10%;

}

.show-annotation{
	opacity: 1;
	transition: opacity 0.75s; /* opacity going from 0 > 1 in 5 sec */
	/* remember that "show annotation" is a class that is added on the element - ie: toggle from UIkit */
}

